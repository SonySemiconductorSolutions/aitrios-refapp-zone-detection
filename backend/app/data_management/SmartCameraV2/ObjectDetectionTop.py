# automatically generated by the FlatBuffers compiler, do not modify
# namespace: SmartCameraV2
import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class ObjectDetectionTop:
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObjectDetectionTop()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsObjectDetectionTop(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # ObjectDetectionTop
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ObjectDetectionTop
    def Perception(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from app.data_management.SmartCameraV2.ObjectDetectionData import (
                ObjectDetectionData,
            )

            obj = ObjectDetectionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ObjectDetectionTop
    def AreaCount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from app.data_management.SmartCameraV2.CountData import CountData

            obj = CountData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ObjectDetectionTop
    def AreaCountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ObjectDetectionTop
    def AreaCountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0


def ObjectDetectionTopStart(builder):
    builder.StartObject(2)


def Start(builder):
    return ObjectDetectionTopStart(builder)


def ObjectDetectionTopAddPerception(builder, perception):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(perception), 0
    )


def AddPerception(builder, perception):
    return ObjectDetectionTopAddPerception(builder, perception)


def ObjectDetectionTopAddAreaCount(builder, areaCount):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(areaCount), 0
    )


def AddAreaCount(builder, areaCount):
    return ObjectDetectionTopAddAreaCount(builder, areaCount)


def ObjectDetectionTopStartAreaCountVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartAreaCountVector(builder, numElems):
    return ObjectDetectionTopStartAreaCountVector(builder, numElems)


def ObjectDetectionTopEnd(builder):
    return builder.EndObject()


def End(builder):
    return ObjectDetectionTopEnd(builder)
